# Name of the workflow
name: Java CI with Gradle

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "master" branch
  push:
    branches: [ "master" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Sets up the specified version of the Java JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Builds the project with Gradle using the official Gradle Build Action
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build

      # 4. Deploys the application to your Digital Ocean server via SSH
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd /path/to/your/app
            git pull
            ./gradlew build
            # Find and kill the process running on port 8080, '|| true' prevents error if no process is found
            kill $(lsof -t -i:8080) || true
            # Start the application in the background and log output
            nohup java -jar build/libs/cicd-lesson-0.0.1-SNAPSHOT.jar > app.log 2>&1 &